generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id              String    @id @default(cuid())
    name            String
    email           String    @unique
    emailVerified   DateTime?
    passwordHash    String?
    image           String?
    profileComplete Boolean   @default(false)
    role            Role      @default(MEMBER)
    accounts        Account[]
    projects        Project[]

    @@index([email])
}

enum Role {
    ADMIN
    MEMBER
}

model Project {
    id          String      @id @default(uuid())
    title       String
    type        ProjectType
    startDate   DateTime?
    endDate     DateTime?
    budgetTotal Float?      @default(0)
    costTotal   Float?      @default(0)
    progress    Float       @default(0)
    daysLeft    Int?
    containers  Json        @default("[]")
    team        Json?       @default("[]")
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    userId      String
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    tasks       Task[]

    @@index([userId])
}

model Task {
    id               String     @id @default(uuid())
    constructionType String
    title            String
    content          String?    @db.Text
    status           TaskStatus @default(todo)
    priority         Priority   @default(low)
    dueDate          DateTime?
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt
    projectId        String
    project          Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@index([projectId])
    @@index([title])
}

enum ProjectType {
    residential
    luxury
    commercial
    office
}

enum TaskStatus {
    todo
    progress
    done
}

enum Priority {
    low
    high
}
