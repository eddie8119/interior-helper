generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  emailVerified   DateTime?
  passwordHash    String?
  image           String?
  profileComplete Boolean   @default(false)
  role            Role      @default(MEMBER)
  accounts        Account[]
  projects        Project[]
  member          Member?

  @@index([email])
}

model Token {
  id      String    @id @default(cuid())
  email   String
  token   String
  expires DateTime
  type    TokenType

  @@unique([email, token])
}

model Member {
  id          String   @id @default(cuid())
  userId      String   @unique
  company     String
  description String
  city        String
  created     DateTime @default(now())
  updated     DateTime @default(now())
  image       String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos      Photo[]
}

model Photo {
  id         String  @id @default(cuid())
  url        String
  publicId   String?
  isApproved Boolean @default(false)

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  MEMBER
}

model Project {
  id                String    @id @default(uuid())
  title             String
  type              ProjectType
  startDate         DateTime  @default(now())
  dueDate           DateTime?
  sellingPriceTotal Float?    @default(0)
  costPriceTotal    Float?    @default(0)
  progress          Float     @default(0)
  containers        Container[]
  team              Json?     @default("[]")
  created           DateTime  @default(now())
  updated           DateTime  @default(now())
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Container {
  id                String    @id @default(uuid())
  type              String
  order             Int
  projectId         String
  project           Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks             Task[]
  sellingPriceTotal Float?    @default(0)
  costPriceTotal    Float?    @default(0)
  created           DateTime  @default(now())
  updated           DateTime  @default(now())

  @@index([projectId])
}

model Task {
  id               String      @id @default(uuid())
  constructionType String
  title            String
  description      String?
  status           TaskStatus  @default(todo)
  priority         Priority    @default(normal)
  startDate        DateTime    @default(now())
  dueDate          DateTime?
  created          DateTime    @default(now())
  updated          DateTime    @default(now())
  containerId      String
  container        Container   @relation(fields: [containerId], references: [id], onDelete: Cascade)
  material         String?
  unit             String?
  amount           Float?      
  costPrice        Float?      
  sellingPrice     Float?      

  @@index([containerId])
}

enum ProjectType {
  residential
  luxury
  commercial
  office
}

enum TaskStatus {
  todo
  done
}

enum Priority {
  normal
  high
}

enum TokenType {
  VERIFICATION
  PASSWORD_RESET
}

// model Container 有需要又關聯到 model User 嗎 ?
// 不需要。間接關聯已足夠。 資料庫設計原則：避免冗餘關聯 /遵循最小權限原則 /保持資料一致性

// 想用projectId 獲取 特定 project 內所有的 tasks, 這樣會比用 containerId 效率會更高 對嗎?  但這樣 model Task 是不是需要關聯到 model Project ?
// 額外的 projectId 欄位 違反資料庫的正規化原則
// 維護額外的資料一致性